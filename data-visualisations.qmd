---
title: "Visualisations"
author: "ZoÃ« Turner"
format: html
embed-resources: true
execute: 
  messsage: false
  warning: false
  echo: false
toc: true
---

Based on the visualisations from an interactive Shiny app by [Trafford Data Lab](https://trafforddatalab.shinyapps.io/population_picker/) whose code is available for [reuse](https://github.com/traffordDataLab/population_picker). 


```{r}
#| label: setup

library(tidyverse) ; library(nomisr) ; library(ggiraph) ; library(scales)

la_names <- c(
  "Birmingham",
  "Coventry",
  "Dudley",
  "Sandwell",
  "Solihull",
  "Walsall",
  "Wolverhampton"
)

source("pre-processing.R")
```


```{r}
#| label: data-processing

pyramid_data <- all_geographies |>
  filter(gender != "Persons") |>
  mutate(
    age = as.integer(age),
    ageband = cut(
      age,
      breaks = c(
        0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 120
      ),
      labels = c(
        "0-4", "5-9", "10-14", "15-19", "20-24", "25-29", "30-34",
        "35-39", "40-44", "45-49", "50-54", "55-59", "60-64", "65-69",
        "70-74", "75-79", "80-84", "85-89", "90+"
      ),
      right = FALSE
    )
  )
```

```{r}
#| label: pyramid-chart-processing

df <- pyramid_data |>
  summarise(n = sum(n), .by = c("gender", "ageband", "area_name")) |>
  mutate(total = sum(n), .by = "area_name") |> 
  mutate(
    gender = factor(gender, levels = c("Males", "Females")),
    age = as.integer(ageband),
    percent = round(n / total * 100, 1),
    tooltip = paste0(
      "<strong>",
      percent, "% (", scales::comma(n, accuracy = 1), ")",
      "</strong><br/>",
      "<em>",
      gender,
      "</em><br/>",
      ageband,
      " years"
    )
  )
```

```{r}
#| label: pyramid-function

#' Pyramid charts
#'
#' @param name String Using Local Authority names individually like `"Birmingham"` or as a vector `c("Birmingham", "Coventry")`. Also possible to use pre determined vectors in a script so `lookup <- c("Birmingham", "Coventry")` with the code then reading: `pyramid_chart(lookup)`
#' @param all_or_subset String Default is "subset" where data is filtered to the Local Authority/ies in the data set. All returns all data with no subsetting. Note that only the first category will be produced by this function unless used in conjunction with a `loop` or `purrr:map` code
#'
#' @return ggplot charts
#' @export

pyramid_chart <- function(name, 
                          all_or_subset = c("subset", "all")) {
  
  all_or_subset <- match.arg(all_or_subset)
  
  
  if (all_or_subset == "subset") {
    
    gg <- df |> 
      filter(area_name == name) 
  }
  
  if (all_or_subset == "all") {
    
    gg <- df
    
  }  

  gg |> 
      ggplot(aes(x = ageband, y = ifelse(gender == "Males", -percent, percent), fill = gender)) +
      ggiraph::geom_bar_interactive(aes(tooltip = tooltip), stat = "identity", alpha = 0.6) +
      scale_y_continuous(labels = abs) +
      scale_fill_manual(values = c("Males" = "#44B7C2", "Females" = "#024B7A")) +
      labs(
        x = NULL,
        y = "% of total population",
        title = name,
        subtitle = paste(scales::comma(unique(gg$total)), "residents"),
        caption = "Source: Office for National Statistics"
      ) +
      coord_flip() +
      theme_minimal(base_size = 14, base_family = "Arial") +
      theme(
        plot.margin = unit(rep(0.5, 4), "cm"),
        panel.grid.major.y = element_blank(),
        panel.grid.minor = element_blank(),
        plot.caption = element_text(colour = "grey60", margin = margin(t = 20, b = -10)),
        axis.title.x = element_text(),
        legend.position = "none"
      )
  }

```

# Static charts

```{r}
#| label: static-chart
#| output: asis
#| panel: tabset

# Based on GitHub issue code https://github.com/quarto-dev/quarto-cli/issues/5667

la_names %>% 
  walk(
    function(x){
      cat(paste("\n\n##", x, "\n"))
      pyramid_chart(x) %>% print()
    }
  )

```

# Faceted Pyramid charts

```{r}
pyramid_chart(name = la_names,
              all_or_subset = "all") +
  facet_wrap(~area_name) +
  labs(subtitle = NULL, 
       title = NULL)

```



# Interactive Pyramid charts (subset of Region)

```{r}
#| label: interactive-charts
#| results: asis
#| include: false

gg_list <- list()

for(i in la_names){

  tmp_plot <- pyramid_chart(name = i)
  gg_list[[i]] <- girafe(ggobj = tmp_plot)
  
  girafe_options(
    gg_list[[i]],
    opts_tooltip(use_fill = TRUE),
    opts_toolbar(saveaspng = FALSE)
  )
  
}

```


```{r}
#| label: html-charts

htmltools::tagList(gg_list)

```

# Ethnicity

```{r}
#| label: ethnicity-chart-processing

results <- la_r_eth %>%
  select(area_code = geography_code, 
         area_name = geography_name, 
         group = cell_name, 
         n = obs_value) |> 
  pivot_wider(names_from = group,
              values_from = n) %>% 
  rename(Asian = `Asian/Asian British`,
         Black = `Black/African/Caribbean/Black British`, 
         Mixed = `Mixed/multiple ethnic groups`, 
         Other = `Other ethnic group`) %>% 
  gather(ethnic_group, n, -area_code, -area_name) %>% 
  group_by(area_code, area_name) %>% 
  mutate(percent = (n/sum(n)))
```

```{r}
#| label: ethnicity-plot
pal <- c("Asian" = "#FF0000", "Black" = "#55FF00", "Mixed" = "#FFAA01", "Other" = "#8A5B47", "White" = "#82B3FF")

ggplot(results, aes(x = fct_rev(area_name), y = percent, fill = ethnic_group)) + 
  geom_col(position = "stack", width = 0.3, alpha = 0.8) +
  scale_y_continuous(expand = c(0, 0), labels = scales::percent) +
  scale_fill_manual(values = pal,
                    guide = guide_legend(keyheight = unit(2, units = "mm"), 
                                         keywidth = unit(12, units = "mm"), 
                                         label.position = "top", 
                                         label.vjust = 10,
                                         nrow = 1)) +
  coord_flip() +
  labs(x = NULL, y = NULL, fill = NULL, title = NULL,
       caption = "Source: 2011 Census  |  @traffordDataLab") +
  theme(panel.grid.major.y = element_blank(),
        plot.margin = unit(c(1,1,2,1), "cm"),
        legend.position = "bottom")
```
